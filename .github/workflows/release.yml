
name: Flutter release CI/CD

on:
  workflow_dispatch:
    inputs:
      ci:
        description: "CI pipeline name"
        required: false
        default: "ci.yml"

# TODO: should fail if commit is not of format "[version]+[versionCode]:"
jobs:
  # CD
  deploy_android:
    name: Deploy beta to Google Play
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Check CI status
        run: |
          output=$(curl -sSL -X GET -G -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.GIT_AUTHORIZATION }}" -d "branch=${{ env.GITHUB_REF_SLUG }}" -d "event=push" https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.event.inputs.ci }}/runs | jq -r '.workflow_runs[0] | "\(.conclusion)"')
          echo "::set-output name=status::$output"
        id: check

      - name: Abort if CI not successful
        if: steps.check.outputs.status != 'success'
        run: |
          echo ${{ steps.check.outputs.status }}
          exit 1

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11.x
      - name: Decrypt Android keys
        run: sh ./android/decrypt.sh
        env:
          RELEASE_SECRET_PASSPHRASE: ${{ secrets.RELEASE_SECRET_PASSPHRASE }}
      # Hack because somehow refuse building if not in root (works in debug though)
      - run: cp android/app/src/main/google-services.json android/app
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: 2.2.0
      - name: Install Flutter dependencies
        run: flutter pub get
      # ultra hack
      - run: rm -rf android/app/src/main/kotlin
      - run: flutter build apk --release --flavor prod
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2'
      - name: Run Fastlane
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: closed_beta
          subdirectory: android
        env:
          FIREBASE_CLI_TOKEN: '${{ secrets.FIREBASE_CLI_TOKEN }}'

  deploy_ios:
    name: Deploy beta build to TestFlight
    runs-on: macos-latest
    steps:
      - name: Checkout code from ref
        uses: actions/checkout@v2

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Check CI status
        run: |
          output=$(curl -sSL -X GET -G -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GIT_AUTHORIZATION }}" -d "branch=${{ env.GITHUB_REF_SLUG }}" -d "event=push" https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.event.inputs.ci }}/runs | jq -r '.workflow_runs[0] | "\(.conclusion)"')
          echo "::set-output name=status::$output"
        id: check

      - name: Abort if CI not successful
        if: steps.check.outputs.status != 'success'
        run: |
          echo ${{ steps.check.outputs.status }}
          exit 1

      - name: Decrypt iOS keys
        run: sh ./ios/decrypt.sh
        env:
          RELEASE_SECRET_PASSPHRASE: ${{ secrets.RELEASE_SECRET_PASSPHRASE }}
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: 2.2.0
      - run: flutter pub get
      - run: flutter build ios --release --no-codesign --flavor prod
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2'
      - name: Deploy iOS Beta to TestFlight via Fastlane
        uses: maierj/fastlane-action@v2.0.1
        continue-on-error: true
        with:
          lane: closed_beta
          subdirectory: ios
          skip-tracking: true
        env:
          APP_STORE_CONNECT_TEAM_ID: '${{ secrets.APP_STORE_CONNECT_TEAM_ID }}'
          DEVELOPER_APP_ID: '${{ secrets.DEVELOPER_APP_ID }}'
          DEVELOPER_APP_IDENTIFIER: '${{ secrets.DEVELOPER_APP_IDENTIFIER }}'
          DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
          FASTLANE_APPLE_ID: '${{ secrets.FASTLANE_APPLE_ID }}'
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: '${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}'
          MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
          GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
          PROVISIONING_PROFILE_SPECIFIER: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}'
          TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
          TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'
          FIREBASE_CLI_TOKEN: '${{ secrets.FIREBASE_CLI_TOKEN }}'


# TODO: might deploy firebase stuff automatically after both finished processing,
# TODO: also updating remote config, langame_version for example
