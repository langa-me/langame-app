rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /users/{userId} {
            allow update, delete, create: if request.auth != null && request.auth.uid == userId;
            allow read: if request.auth != null;
        }
        match /memes/{memeId} {
            allow read: if request.auth != null;
            match /tags/{tagId} {
                allow read: if request.auth != null;
            }
        }
        match /{path=**}/tags/{tagId} {
            allow read: if request.auth != null;
            // Only allows writing feedback tags
            allow write: if request.resource.data.feedback.userId == request.auth.uid;
        }
        match /langames/{langameId} {
            // Only allow access to invited Langames
            // TODO
            // allow read: if request.auth != null && request.auth.uid in resource.data.players;
            allow read: if request.auth != null;
            // TODO: security!!!!
            allow create: if request.auth != null &&
                             request.resource.data.keys().hasOnly(['initiator', 'date', 'topics']) &&
                             request.resource.data.initiator == request.auth.uid;
            // Client can update "currentMeme"
            allow update: if (request.resource.data.diff(resource.data)
                .affectedKeys()
                .hasOnly(['currentMeme'])) &&
                request.resource.data.currentMeme >= 0 &&
                request.resource.data.currentMeme < resource.data.memes.size() ||
                (request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['link'])) &&
                request.auth.uid == resource.data.initiator;
                // initiator can update "link" (dynamic link)
                // request.time > resource.data.nextMeme &&
            match /players/{uid} {
                // TODO: temporarily allow everything, should only be able to read, create self, and update notes
                allow read: if request.auth != null;
                allow write: if request.auth != null;
                match /notes/{noteId} {
                    allow read: if request.auth != null;
                    allow write: if request.auth != null && request.auth.uid == uid;
                }
            }
        }
        // @see https://firebase.google.com/docs/firestore/security/rules-query#secure_and_query_documents_based_on_collection_groups
        match /{path=**}/players/{uid} {
            allow read: if request.auth != null;
        }
        match /interactions/{interactionId} {
            // TODO: allow only see self interactions?
            allow read: if request.auth != null; // && request.auth.uid in resource.data.usersArray;
        }
        match /preferences/{preferenceId} {
            // Only auth & self preferences
            allow read, update, delete: if request.auth != null && request.auth.uid == preferenceId;
            allow create: if request.auth != null;
        }
        match /stripe_customers/{uid} {
            allow read, write: if request.auth != null && request.auth.uid == uid;
            match /payment_methods/{id} {
                allow read, write: if request.auth != null && request.auth.uid == uid;
            }
            match /payments/{id} {
                allow read, write: if request.auth != null && request.auth.uid == uid;
            }
            match /subscriptions/{id} {
                allow read: if request.auth != null && request.auth.uid == uid;
            }
        }
        match /products/{productId} {
            allow read: if request.auth != null;
        }
    }
}

