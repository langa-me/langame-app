rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function isAdmin(request) {
            return getUser(request.auth.uid).role =='admin';
        }
        function getUser(id) {
            return get(/databases/$(database)/documents/users/$(id)).data;
        }
        // TODO: overall prevent DDOSes by setting "last update" stuff
        match /users/{userId} {
            // TODO: Maybe more strict
            // TODO: how to prevent taking someone else tag?
            allow write: if request.auth != null && request.auth.uid == userId;// &&
                // Allow changing everything except credits
                // (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['credits'])); // &&
                // If the user try to change lastSignInTime, it has to be within the 20 seconds obviously
                //request.time - request.resource.data.get('lastSignInTime', request.time)  < duration.value(20, 's');
            allow read: if true; // TODO
        }
        match /recommendations/{recommendationId} {
            allow read: if request.auth != null && request.auth.uid == recommendationId;
        }
        match /preferences/{preferenceId} {
            // Only auth & self preferences
            allow read, update, delete: if request.auth != null && request.auth.uid == preferenceId;
            allow create: if request.auth != null;
        }
        match /{path=**}/tags/{tagId} {
            allow read: if request.auth != null;
            // Only allows writing feedback tags
            allow write: if request.resource.data.feedback.userId == request.auth.uid;
        }
        match /langames/{langameId} {
            // Only allow access to invited Langames
            // TODO
            // allow read: if request.auth != null && request.auth.uid in resource.data.players;
            allow read: if request.auth != null;
            // TODO: security!!!!
            allow create: if request.auth != null &&
                             request.resource.data.keys()
                                .hasOnly(['initiator', 'date', 'topics', 'reservedSpots', 'isText']) &&
                             request.resource.data.initiator == request.auth.uid &&
                             // Has enough credits?
                             getUser(request.auth.uid).credits > 0;
            // Client can update "currentMeme"
            allow update: if request.auth != null && (request.resource.data.diff(resource.data)
                .affectedKeys()
                .hasOnly(['currentMeme'])) &&
                request.resource.data.currentMeme >= 0 &&
                request.resource.data.currentMeme < resource.data.memes.size() ||
                (request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['link'])) &&
                request.auth.uid == resource.data.initiator ||
                // initiator can update "link" (dynamic link)
                // request.time > resource.data.nextMeme && // TODO
                // initiator can lock/unlock the Langame by setting 'isLocked'
                (request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['isLocked'])) &&
                request.auth.uid == resource.data.initiator; // TODO: only give feedback
                // TODO:
                // It can only do so if does not hit the hard limit of 6 players
                // resource.data.players.size() < 6 - resouce.data.reversedSpots.size();
            function canEnterLangame() {
                let langame = get(/databases/$(database)/documents/langames/$(langameId)).data;
                // Can enter only if the room is not full or I have a reserved spot
                return !langame.isLocked ||
                    (request.auth != null && request.auth.uid in langame.reservedSpots) ||
                    // Obviously the initiator can always join
                    (request.auth != null && request.auth.uid == langame.initiator);
            }
            match /players/{uid} {
                // TODO: temporarily allow everything, should only be able to read, create self, and update notes
                allow read: if request.auth != null;
                allow update: if request.auth != null &&
                    request.auth.uid == uid;
                allow create: if request.auth != null &&
                    request.auth.uid == uid &&
                    canEnterLangame();

                match /notes/{noteId} {
                    allow read: if request.auth != null;
                    allow write: if request.auth != null && request.auth.uid == uid;
                }
            }
        }
        // @see https://firebase.google.com/docs/firestore/security/rules-query#secure_and_query_documents_based_on_collection_groups
        match /{path=**}/players/{uid} {
            allow read: if request.auth != null;
        }

        match /stripe_customers/{uid} {
            allow read, write: if request.auth != null && request.auth.uid == uid;
            match /payment_methods/{id} {
                allow read, write: if request.auth != null && request.auth.uid == uid;
            }
            match /payments/{id} {
                allow read, write: if request.auth != null && request.auth.uid == uid;
            }
            match /subscriptions/{id} {
                allow read: if request.auth != null && request.auth.uid == uid;
            }
        }
        match /products/{productId} {
            allow read: if request.auth != null;
        }
        match /topics/{topicId} {
            allow read: if request.auth != null;
        }
        match /feedbacks/{feedbackId} {
            allow write: if request.auth != null && request.auth.uid == feedbackId;
        }
        match /prompts/{promptId} {
            allow read, write: if request.auth != null &&
                isAdmin(request);
        }
        match /memes/{memeId} {
            allow read, write: if request.auth != null &&
                isAdmin(request);
        }
        match /recordings/{recordingId} {
            allow update: if (request.resource.data.diff(resource.data)
                .affectedKeys()
                .hasOnly(['note'])) &&
                resource.data.userId == request.auth.uid;
            allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
            allow read: if request.auth != null && request.auth.uid == resource.data.userId;
            allow create: if request.auth != null &&
                request.resource.data.keys()
                .hasAll([
                    "userId",
                    "createdAt",
                    "text",
                    "metadata"]) &&
                request.resource.data.userId == request.auth.uid;
        }
        match /messages/{messageId} {
            allow read: if request.auth != null && (request.auth.uid == resource.data.fromUid || 
                request.auth.uid == resource.data.toUid);
            allow create: if request.auth != null &&
                request.resource.data.keys()
                .hasAll([
                    "type",
                    "body",
                    "channelName",
                    "createdAt",
                    "fromUid",
                    "toUid"]) &&
                // Clients can only send messages of type "text"
                request.resource.data.type == 1 &&
                request.resource.data.fromUid == request.auth.uid &&
                // "to" exists?
                getUser(request.resource.data.toUid) != null;
        }
        match /apis/{apiId} {
            allow read: if request.auth != null;
        }
    }
}

