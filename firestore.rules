rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function isAdmin(request) {
            return getUser(request.auth.uid).role =='admin';
        }
        function getUser(id) {
            return get(/databases/$(database)/documents/users/$(id)).data;
        }
        // TODO: overall prevent DDOSes by setting "last update" stuff
        match /users/{userId} {
            // TODO: Maybe more strict
            // TODO: how to prevent taking someone else tag?
            allow write: if request.auth != null && request.auth.uid == userId &&
                // Allow changing everything except credits
                (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['credits', 'rateLimits'])); // &&
                // If the user try to change lastSignInTime, it has to be within the 20 seconds obviously
                //request.time - request.resource.data.get('lastSignInTime', request.time)  < duration.value(20, 's');
            allow read: if true; // TODO
        }
        match /recommendations/{recommendationId} {
            allow read: if request.auth != null && request.auth.uid == recommendationId;
        }
        match /preferences/{preferenceId} {
            // Currently can only write to own preferences
            // But can read others
            // TODO: can we restrict to only read on "favoriteTopics"?
            allow read: if request.auth != null;
            allow update, delete: if request.auth != null && request.auth.uid == preferenceId;
            allow create: if request.auth != null;
        }
        match /{path=**}/tags/{tagId} {
            allow read: if request.auth != null;
            // Only allows writing feedback tags
            allow write: if request.resource.data.feedback.userId == request.auth.uid;
        }
        match /langames/{langameId} {
            // Only allow access to invited Langames
            // TODO
            // allow read: if request.auth != null && request.auth.uid in resource.data.players;
            allow read: if request.auth != null;
            allow create: if request.auth != null; // TODO:
        }
        match /langame_presences/{userId} {
            // TODO
            allow read: if request.auth != null;
            allow create: if request.auth != null;
        }

        match /topics/{topicId} {
            allow read: if request.auth != null;
        }
        match /feedbacks/{feedbackId} {
            allow write: if request.auth != null && request.auth.uid == feedbackId;
        }
        match /prompts/{promptId} {
            allow read, write: if request.auth != null &&
                isAdmin(request);
        }
        match /memes/{memeId} {
            allow read, write: if request.auth != null &&
                isAdmin(request);
        }
        match /messages/{messageId} {
            function isRateLimited(request) {
                let user = getUser(request.auth.uid);
                // Is rate limited? (one second per user)
                return "rateLimits" in user && (request.time - duration.value(1, 's')) <= user.rateLimits.message;
            }
            allow read: if request.auth != null;
            allow create: if request.auth != null &&
                request.resource.data.keys()
                .hasAll([
                    "type",
                    "body",
                    "createdAt",
                    "langameId",
                    "author"]) &&
                // Clients can only send messages of type "text"
                request.resource.data.type == 1 &&
                !isRateLimited(request);
        }
        match /apis/{apiId} {
            allow read: if request.auth != null;
        }
    }
}

