default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
DEVELOPER_APP_IDENTIFIER_DEV = ENV["DEVELOPER_APP_IDENTIFIER_DEV"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
PROVISIONING_PROFILE_SPECIFIER_DEV = ENV["PROVISIONING_PROFILE_SPECIFIER_DEV"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: false
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  lane :closed_beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    gym(
      configuration: "Release-prod",
      workspace: "Runner.xcworkspace",
      scheme: "prod",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: false,
      skip_submission: false,
      notify_external_testers: true,
      ipa: "./Runner.ipa",
      changelog: "Topics are now added to meme recordings. Exporting them therefore display them as tags.",
      distribute_external: true,
      groups: "public",
    )

    delete_temp_keychain(keychain_name)
  end
  lane :firebase_distribution do
    begin
      keychain_name = TEMP_KEYCHAIN_USER
      keychain_password = TEMP_KEYCHAIN_PASSWORD
      ensure_temp_keychain(keychain_name, keychain_password)
  
      match(
        type: 'adhoc',
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER_DEV}",
        git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password
      )
  
      gym(
        configuration: "Release-dev",
        workspace: "Runner.xcworkspace",
        scheme: "dev",
        export_method: "ad-hoc",
        export_options: {
          provisioningProfiles: {
              DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER_DEV
          }
        }
      )
      firebase_app_distribution(
        app: "1:388264600961:ios:cb9793dd455c23e50cf480",
        firebase_cli_token: ENV["FIREBASE_CLI_TOKEN_DEV"],
        ipa_path: "./Runner.ipa",
      )
    end
  end
end
