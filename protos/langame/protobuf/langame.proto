syntax = "proto3";
package langame.protobuf;

import "google/protobuf/timestamp.proto";

// Note: models ids are usually not stored in Firestore since it already use id to index them
// it is mostly used within the logic of the front-end / services

message Error {
  string developerMessage = 1;
  google.protobuf.Timestamp createdAt = 2;
  string code = 3;
  string userMessage = 4;
}

message SeenMemes {
  Seen seen = 1;
  message Seen {
    repeated Single s = 1;
    message Single {
      google.protobuf.Timestamp date = 1;
      string meme = 2;
    }
  }
}

message Meme {
  google.protobuf.Timestamp created_at = 1;
  string content = 2;
  repeated string topics = 4;
  string prompt_id = 5;
  map<string, string> translated = 6;
  string id = 7;
  bool disabled = 8;
  bool tweet = 9;
}

message User {
  /// [uid] is set by Firebase authentication
  string uid = 1;
  string email = 2;
  string display_name = 3;
  // bool emailVerified = false;
  string phone_number = 4;
  string photo_url = 5;

  /// Is the user [online]?
  bool online = 6;

  /// Google account linked?
  bool google = 7;

  /// Apple account linked?
  bool apple = 9;

  /// Twitter-like [tag] i.e. @steveTheApple
  string tag = 11;

  /// Device [tokens] used for Cloud Messaging
  repeated string tokens = 12;

  repeated string latest_interactions = 13;
  repeated Error errors = 14;
  google.protobuf.Timestamp last_login = 15;
  google.protobuf.Timestamp last_logout = 16;
  google.protobuf.Timestamp creation_time = 17;
  bool disabled = 18;
  repeated Device devices = 19;
  int32 credits = 20;
  // user or admin
  string role = 21;
  bool bot = 22;

  message Device {
    string langame_version = 1;
    string device_info = 2;
  }
}

message UserPreference {
  string user_id = 2;
  // Do I want to be recommended like-minded new people?
  bool user_recommendations = 3;
  int32 theme_index = 4;
  bool has_done_on_boarding = 5;
  // Searched user tags
  repeated string user_search_history = 6;
  repeated string favorite_topics = 8;
  repeated string topic_search_history = 9;
  repeated Error errors = 10;
  bool saw_whats_new = 13;
  Notification notification = 14;
  bool preview_mode = 15;

  message Notification {
    Invite invite = 1;
    Message message = 2;
    message Invite {
      bool email = 1;
      bool push = 2;
    }
    message Message {
      bool email = 1;
      bool push = 2;
    }
  }
}

message Langame {
  string id = 1;
  repeated Player players = 2;
  repeated string topics = 3;
  // Who started this
  string initiator = 5;
  // Over, finished, nobody, can join anymore
  google.protobuf.Timestamp done = 7;
  // Initial date planned
  google.protobuf.Timestamp created_at = 9;
  repeated Error errors = 10;
  repeated Reflection reflections = 21;
  repeated string tags = 23;

  message Player {
    string id = 1;
    string tag = 2;
    string photo_url = 4;
    bool bot = 5;
    string locale = 10;
    string email = 12;
  }

  message Reflection {
    string user_id = 1;
    // Whatever is the last message id
    string last_message_id = 2;
    repeated string alternatives = 3;
    google.protobuf.Timestamp created_at = 4;
    ContentFilter content_filter = 5;
    map<string, uint32> userFeedbacks = 6;
  }
}


message FunctionResponse {
  oneof type {
    VersionCheck version_check = 1;
  }

  message VersionCheck {
    UpdateRequired update = 1;
    enum UpdateRequired {
      OK = 0;
      REQUIRED = 1;
      RETRO_COMPATIBLE = 2;
    }
  }
}

// Take inspiration from https://discord.com/developers/docs/resources/channel#message-object
message Message {
  google.protobuf.Timestamp created_at = 3;
  Author author = 4;
  string langame_id = 7;
  Type type = 8;
  string body = 9;
  string title = 10;
  string id = 11;
  Analysis analysis = 12;
  Delivery delivery = 13;
  repeated Component components = 14;

  // https://discord.com/developers/docs/resources/user#user-object
  message Author {
    string id = 1;
    string tag = 2;
    string photo_url = 4;
    bool bot = 5;
    string locale = 10;
    string email = 12;
  }

  // https://discord.com/developers/docs/interactions/message-components#component-object
  message Component {
    uint32 type = 1;
    string custom_id = 2;
    bool disabled = 3;
    uint32 style = 4;
    string label = 5;
    string emoji = 6;
    string url = 7;
    repeated Option options = 8;
    string placeholder = 9;
    int32 min_values = 10;
    int32 max_values = 11;
    repeated Component components = 12;
    // https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-option-structure
    message Option {
      string label = 1;
      string value = 2;
      string description = 3;
      string emoji = 4;
      bool default = 5;
    }
  }
  message Delivery {
    uint32 attempts = 1;
    google.protobuf.Timestamp end_time = 2;
    string error = 3;
    string status = 4;
  }
  
  enum Type {
    INVITE = 0;
    MESSAGE = 1;
  }
  message Analysis {
    repeated string topics = 1;
    repeated Sentiment sentiments = 2;
    Error error = 3;
    ContentFilter filter = 4;
    repeated Token token = 5;

    message Error {
      string developer_message = 1;
      int32 tries = 2;
    }

    message Sentiment {
      float score = 1;
      string label = 2;
    }
    message Token {
      uint32 start = 1;
      uint32 end = 2;
      string word = 3;
      string entity_group = 4;
      float score = 5;
    }
  }
}

enum ContentFilter {
  Safe = 0;
  Sensitive = 1;
  Unsafe = 2;
}