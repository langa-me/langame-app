syntax = "proto3";
package langame.protobuf;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// Note: models ids are usually not stored in Firestore since it already use id to index them
// it is mostly used within the logic of the front-end / services

message Error {
  string developerMessage = 1;
  google.protobuf.Timestamp createdAt = 2;
  string code = 3;
  string userMessage = 4;
}

message SeenMemes {
  Seen seen = 1;
  message Seen {
    repeated Single s = 1;
    message Single {
      google.protobuf.Timestamp date = 1;
      string meme = 2;
    }
  }
}

message Meme {
  google.protobuf.Timestamp created_at = 1;
  string content = 2;
  repeated string topics = 4;
  string prompt_id = 5;
  map<string, string> translated = 6;
  string id = 7;
  bool disabled = 8;
}

message User {
  /// [uid] is set by Firebase authentication
  string uid = 1;
  string email = 2;
  string display_name = 3;
  // bool emailVerified = false;
  string phone_number = 4;
  string photo_url = 5;

  /// Is the user [online]?
  bool online = 6;

  /// Google account linked?
  bool google = 7;

  /// Apple account linked?
  bool apple = 9;

  /// Twitter-like [tag] i.e. @steveTheApple
  string tag = 11;

  /// Device [tokens] used for Cloud Messaging
  repeated string tokens = 12;

  repeated string latest_interactions = 13;
  repeated Error errors = 14;
  google.protobuf.Timestamp last_login = 15;
  google.protobuf.Timestamp last_logout = 16;
  google.protobuf.Timestamp creation_time = 17;
  bool disabled = 18;
  repeated Device devices = 19;
  int32 credits = 20;
  // user or admin
  string role = 21;

  message Device {
    string langame_version = 1;
    string device_info = 2;
  }
}

enum InteractionLevel {
  BAD = 0;
  AVERAGE = 1;
  GREAT = 2;
  LOVE = 3;
}

message UserPreference {
  string user_id = 2;
  // Do I want to be recommended like-minded new people?
  RecommendationType user_recommendations = 3;
  int32 theme_index = 4;
  bool has_done_on_boarding = 5;
  // Searched user tags
  repeated string user_search_history = 6;
  bool shake_to_feedback = 7;
  repeated string favorite_topics = 8;
  repeated string topic_search_history = 9;
  repeated Error errors = 10;
  string speech_to_text_locale = 11;
  bool saw_whats_new = 13;
  Notification notification = 14;

  message Notification {
    Invite invite = 1;
    Message message = 2;
    message Invite {
      bool email = 1;
      bool push = 2;
    }
    message Message {
      bool email = 1;
      bool push = 2;
    }
  }
  enum RecommendationType {
    NONE = 0;
    NEW = 1;
    COMPOUND = 2;
    ALL = 3;
  }
}

message Langame {
  string channel_name = 1;
  // Players is a (Firestore) collection of Player
  repeated string players = 2;
  repeated string topics = 3;
  // Memes
  repeated Meme memes = 4;
  // Who started this
  string initiator = 5;
  // Over, finished, nobody, can join anymore
  google.protobuf.Timestamp done = 7;
  int32 current_meme = 8;
  // Initial date planned
  google.protobuf.Timestamp date = 9;
  repeated Error errors = 10;
  google.protobuf.Timestamp started = 11;
  // When the players can go next meme
  google.protobuf.Timestamp next_meme = 13;
  int32 memes_seen = 14;
  google.protobuf.Timestamp meme_changed = 15;
  // Link to the Langame
  string link = 16;
  // Players that have reserved spots
  repeated string reserved_spots = 18;
  // Server-set simple discrete property to know whether the Langame is locked or not
  bool is_locked = 19;
  bool is_text = 20;
}

message Player {
  string user_id = 1;
  // Timestamp of the arrival in the Langame
  google.protobuf.Timestamp time_in = 2;
  // Timestamp of the departure in the Langame
  google.protobuf.Timestamp time_out = 3;
  repeated Note notes = 4;
  // Necessary for Agora...
  int32 audio_id = 5;
  string audio_token = 6;
  repeated Error errors = 7;
}
message Note {
  google.protobuf.Timestamp created_at = 1;
  oneof type {
    Generic generic = 2;
    Goal goal = 3;
    Definition definition = 4;
  }

  message Generic {
    string content = 1;
  }
  message Goal {
    string content = 1;
  }
  message Definition {
    string content = 1;
  }
}

message Subscription {
  string status = 1;
}

message FunctionResponse {
  oneof type {
    VersionCheck version_check = 1;
  }

  message VersionCheck {
    UpdateRequired update = 1;
    enum UpdateRequired {
      OK = 0;
      REQUIRED = 1;
      RETRO_COMPATIBLE = 2;
    }
  }
}

message Prompt {
  // Type corresponds to the Input.type name
  string type = 1;
  // i.e. "This is a conversation starter on [TOPIC]"
  string template = 2;
  string id = 4;
  google.protobuf.Any parameters = 5;
}


message Recording {
  google.protobuf.Timestamp created_at = 1;
  string text = 2;
  string user_id = 3;
  map<string, string> metadata = 4;
  string note = 5;
}



message Message {
  google.protobuf.Timestamp created_at = 3;
  string from_uid = 4;
  string to_uid = 5;
  // Langame channel name?
  string channel_name = 7;
  Type type = 8;
  string body = 9;
  string title = 10;
  enum Type {
    INVITE = 0;
    MESSAGE = 1;
  }
}